"""
Simulateur de Valorisation des Urgences ‚Äì Scl√©pios¬†I.A.
Version multi‚Äëonglet avec analytics UHCD & projections interactives
Ex√©cutez¬†: streamlit run simulateur_urgences.py
Auteur¬†: R√©mi¬†Moreau ‚Äì remi.moreau@sclepios-ia.com
Mise¬†√†¬†jour¬†: 22¬†avril¬†2025
‚Ä¢¬†Migration vers st.query_params (fin de l‚ÄôAPI exp√©rimentale)
‚Ä¢¬†Volumes toujours entiers (arrondi commercial)
‚Ä¢¬†Calculs ROI d√©taill√©s apr√®s projection annuelle¬†+¬†option projection passages
"""

import math
import streamlit as st
import pandas as pd
import plotly.express as px

# -------------------------------------------------
# CONFIGURATION G√âN√âRALE
# -------------------------------------------------
st.set_page_config(page_title="Simulateur Urgences ‚Äì Scl√©pios I.A.", layout="wide")

# -------------------------------------------------
# FONCTIONS UTILITAIRES
# -------------------------------------------------

def qp_int(qp: dict, key: str, default: int) -> int:
    """R√©cup√®re un entier depuis les query params."""
    try:
        return int(qp.get(key, default))
    except Exception:
        return default


def revenues(uhcd: int | float, consult: int | float, tarifs: dict) -> tuple:
    """Calcule les diff√©rentes composantes de recettes."""
    avis = consult * 0.07
    ccmu2 = consult * 0.03
    ccmu3 = consult * 0.03
    rev_uhcd = uhcd * tarifs["UHCD"]
    rev_avis = avis * tarifs["AVIS"]
    rev_ccmu2 = ccmu2 * tarifs["CCMU2"]
    rev_ccmu3 = ccmu3 * tarifs["CCMU3"]
    rev_total = rev_uhcd + rev_avis + rev_ccmu2 + rev_ccmu3
    return (
        rev_total,
        rev_uhcd,
        rev_avis,
        rev_ccmu2,
        rev_ccmu3,
        avis,
        ccmu2,
        ccmu3,
    )


def to_int(value: float | int) -> int:
    """Arrondi commercial puis convertit en int (volumes)."""
    return int(round(value))


# -------------------------------------------------
# PARAM√àTRES COMMUNS (SIDEBAR)
# -------------------------------------------------
st.sidebar.header("‚öôÔ∏è Param√®tres de simulation")
with st.sidebar.expander("Modifier les tarifs", expanded=False):
    TARIF_AVIS_SPE = st.number_input("Tarif Avis Sp√©cialis√© (‚Ç¨)", 0.0, 1000.0, 24.56, 0.01)
    TARIF_CCMU2 = st.number_input("Tarif CCMU¬†2+ (‚Ç¨)", 0.0, 1000.0, 14.53, 0.01)
    TARIF_CCMU3 = st.number_input("Tarif CCMU¬†3+ (‚Ç¨)", 0.0, 1000.0, 19.38, 0.01)
    TARIF_UHCD = st.number_input("Tarif UHCD (‚Ç¨)", 0.0, 2000.0, 400.0, 1.0)
    BONUS_MONORUM = (
        st.number_input("Majoration UHCD mono‚ÄëRUM (%)", 0.0, 100.0, 5.0, 0.1) / 100.0
    )

tarifs = {
    "AVIS": TARIF_AVIS_SPE,
    "CCMU2": TARIF_CCMU2,
    "CCMU3": TARIF_CCMU3,
    "UHCD": TARIF_UHCD,
}

baseline = st.sidebar.slider("Taux actuel d‚ÄôUHCD (%)", 0, 50, 5)
default_cible = min(50, baseline + 6)
cible = st.sidebar.slider("Taux cible d‚ÄôUHCD (%)", baseline, 50, default_cible)
taux_mono = st.sidebar.slider("Proportion UHCD mono‚ÄëRUM (%)", 0, 100, 70)
passages = st.sidebar.number_input(
    "Nombre total de passages",
    min_value=0,
    max_value=1_000_000,
    value=40_000,
    step=100,
    format="%d",
)

# -------------------------------------------------
# ONGLET 1¬†: SIMULATION HISTORIQUE
# -------------------------------------------------
tab_simulation, tab_uhcd = st.tabs(["Simulation", "UHCD¬†Analytics"])

with tab_simulation:
    h1, h2, h3 = st.columns([1, 2, 1])
    with h2:
        st.image("logo_complet.png", width=200)
    st.markdown(
        "<h1 style='text-align:center;'>üìä Simulateur de Valorisation des Urgences</h1>",
        unsafe_allow_html=True,
    )
    st.markdown("---")

    # --- CALCULS D‚ÄôORIGINE ---
    uhcd_base = passages * baseline / 100
    uhcd_target = passages * cible / 100
    uhcd_diff = max(0, uhcd_target - uhcd_base)
    mono_base = uhcd_base * taux_mono / 100
    mono_diff = uhcd_diff * taux_mono / 100
    consult_ext = passages - uhcd_base
    avis = consult_ext * 0.07
    ccmu2 = consult_ext * 0.03
    ccmu3 = consult_ext * 0.03

    gain_avis = avis * tarifs["AVIS"]
    gain_ccmu2 = ccmu2 * tarifs["CCMU2"]
    gain_ccmu3 = ccmu3 * tarifs["CCMU3"]
    gain_uhcd_base = mono_diff * tarifs["UHCD"]
    gain_uhcd_bonus = (mono_base + mono_diff) * tarifs["UHCD"] * BONUS_MONORUM
    gain_uhcd = gain_uhcd_base + gain_uhcd_bonus
    total_gain = gain_avis + gain_ccmu2 + gain_ccmu3 + gain_uhcd

    st.markdown("### üîç Indicateurs cl√©s")
    kpi_cols = st.columns(4)
    kpi_cols[0].metric("Avis sp√©cialis√©s (‚Ç¨)", f"{gain_avis:,.0f}")
    kpi_cols[1].metric("CCMU¬†2+ (‚Ç¨)", f"{gain_ccmu2:,.0f}")
    kpi_cols[2].metric("CCMU¬†3+ (‚Ç¨)", f"{gain_ccmu3:,.0f}")
    kpi_cols[3].metric("UHCD (‚Ç¨)", f"{gain_uhcd:,.0f}")
    st.markdown(
        f"<h2 style='text-align:center;'>üí∞ Total estim√©¬†: <strong>{total_gain:,.0f}¬†‚Ç¨</strong></h2>",
        unsafe_allow_html=True,
    )
    st.markdown("---")

    # --- D√âTAIL ---
    with st.expander("D√©tail par levier"):
        labels = [
            "Avis sp√©cialis√©s",
            "CCMU¬†2+",
            "CCMU¬†3+",
            "UHCD mono‚ÄëRUM base",
            "Majoration UHCD mono‚ÄëRUM",
        ]
        vols = [
            to_int(avis),
            to_int(ccmu2),
            to_int(ccmu3),
            to_int(mono_diff),
            to_int(mono_base + mono_diff),
        ]
        gains_list = [
            gain_avis,
            gain_ccmu2,
            gain_ccmu3,
            gain_uhcd_base,
            gain_uhcd_bonus,
        ]
        data = pd.DataFrame({"Levier": labels, "Volume": vols, "Gain (‚Ç¨)": gains_list})
        data["Gain (‚Ç¨)"] = data["Gain (‚Ç¨)"].round(2)
        st.dataframe(data.set_index("Levier"), use_container_width=True)

        fig = px.bar(
            data,
            x="Gain (‚Ç¨)",
            y="Levier",
            orientation="h",
            text="Gain (‚Ç¨)",
            color="Levier",
            color_discrete_sequence=px.colors.qualitative.Set2,
            template="plotly_white",
        )
        fig.update_traces(textposition="outside", texttemplate="%{text:,.0f}")
        st.plotly_chart(fig, use_container_width=True)

    # --- FOOTER ---
    st.markdown("---")
    st.markdown(
        "<div style='text-align:center;'><strong>R√©mi¬†Moreau</strong>: remi.moreau@sclepios-ia.com</div>",
        unsafe_allow_html=True,
    )
    st.markdown(
        "<div style='text-align:center;'>https://sclepios-ia.com</div>",
        unsafe_allow_html=True,
    )

# -------------------------------------------------
# ONGLET 2¬†: UHCD ANALYTICS
# -------------------------------------------------
with tab_uhcd:
    st.image("logo_complet.png", width=160)
    st.header("üìä Analyse UHCD mensuelle & projections interactives")
    st.markdown("---")

    # ---------------- Query params ----------------
    qp = st.query_params.to_dict()

    # -------- Saisie des donn√©es mensuelles --------
    st.markdown("### üì• Donn√©es mensuelles")
    col_a, col_b, col_c = st.columns(3)
    uhcd_mois = col_a.number_input(
        "UHCD valoris√©es (mois)",
        min_value=0,
        max_value=100_000,
        value=qp_int(qp, "uhcd", 100),
        key="uhcd_mois",
        format="%d",
    )
    consult_mois = col_b.number_input(
        "Consultations externes (mois)",
        min_value=0,
        max_value=100_000,
        value=qp_int(qp, "consult", 1_000),
        key="consult_mois",
        format="%d",
    )
    uhcd_sclepios_mois = col_c.number_input(
        "UHCD suppl√©mentaires Scl√©pios I.A. (mois)",
        min_value=0,
        max_value=100_000,
        value=qp_int(qp, "plus", 20),
        key="uhcd_plus_mois",
        format="%d",
    )

    # -------- Lien partageable --------
    if st.button("üîó G√©n√©rer un lien partageable avec ces valeurs"):
        st.query_params.clear()
        st.query_params.from_dict(
            {
                "uhcd": uhcd_mois,
                "consult": consult_mois,
                "plus": uhcd_sclepios_mois,
            }
        )
        st.success("Lien mis √† jour¬†! Copiez l'URL de votre navigateur pour la partager √† votre client.")

    total_mois = uhcd_mois + consult_mois

    if total_mois == 0:
        st.warning("Veuillez saisir un nombre de passages >¬†0 pour afficher les r√©sultats.")
        st.stop()

    # -------- Pourcentages mensuels --------
    pct_uhcd = uhcd_mois / total_mois * 100
    pct_uhcd_plus = (uhcd_mois + uhcd_sclepios_mois) / total_mois * 100

    st.markdown("### üìå Indicateurs mensuels")
    m1, m2 = st.columns(2)
    m1.metric("Taux UHCD valoris√©es", f"{pct_uhcd:.2f}¬†%")
    m2.metric("Taux UHCD apr√®s Scl√©pios", f"{pct_uhcd_plus:.2f}¬†%")

    # -------- Projection annuelle simple (√ó12) --------
    st.markdown("### üìÖ Projection annuelle (√ó12)")
    uhcd_an = to_int(uhcd_mois * 12)
    uhcd_sclepios_an = to_int(uhcd_sclepios_mois * 12)
    consult_an = to_int(consult_mois * 12)
    total_passages_init = to_int(total_mois * 12)

    p1, p2, p3 = st.columns(3)
    p1.metric("UHCD/an (actuel)", f"{uhcd_an:,.0f}")
    p2.metric("UHCD/an apr√®s Scl√©pios", f"{uhcd_an + uhcd_sclepios_an:,.0f}")
    p3.metric("Passages/an (base)", f"{total_passages_init:,.0f}")

    # -------- ROI annuel d√©taill√© --------
    (rev_an_base_total, rev_an_base_uhcd, rev_an_base_avis, rev_an_base_ccmu2, rev_an_base_ccmu3, avis_an_base, ccmu2_an_base, ccmu3_an_base,) = revenues(uhcd_an, consult_an, tarifs)

    consult_an_plus = max(0, consult_an - uhcd_sclepios_an)  # √©vite n√©gatif
    (rev_an_plus_total, rev_an_plus_uhcd, rev_an_plus_avis, rev_an_plus_ccmu2, rev_an_plus_ccmu3, avis_an_plus, ccmu2_an_plus, ccmu3_an_plus,) = revenues(uhcd_an + uhcd_sclepios_an, consult_an_plus, tarifs)

    roi_an_uhcd_pct = (rev_an_plus_uhcd - rev_an_base_uhcd) / rev_an_base_uhcd * 100 if rev_an_base_uhcd else 0
    roi_an_total_pct = (rev_an_plus_total - rev_an_base_total) / rev_an_base_total * 100 if rev_an_base_total else 0

    st.markdown("#### üí∂ ROI annuel")
    a1, a2, a3 = st.columns(3)
    a1.metric("Recette UHCD actuelle (‚Ç¨)", f"{rev_an_base_uhcd:,.0f}")
    a2.metric("Recette UHCD apr√®s Scl√©pios (‚Ç¨)", f"{rev_an_plus_uhcd:,.0f}")
    a3.metric("ROI UHCD (%)", f"{roi_an_uhcd_pct:.1f}¬†%")

    a4, a5 = st.columns(2)
    a4.metric("Recette totale actuelle (‚Ç¨)", f"{rev_an_base_total:,.0f}")
    a5.metric("ROI total (%)", f"{roi_an_total_pct:.1f}¬†%")

    with st.expander("D√©tail par levier ‚Äì projection annuelle"):
        detail_an_df = pd.DataFrame(
            {
                "Levier": ["Avis sp√©cialis√©s", "CCMU¬†2+", "CCMU¬†3+", "UHCD"],
                "Volume Baseline": [avis_an_base, ccmu2_an_base, ccmu3_an_base, uhcd_an],
                "Gain Baseline (‚Ç¨)": [
                    rev_an_base_avis,
                    rev_an_base_ccmu2,
                    rev_an_base_ccmu3,
                    rev_an_base_uhcd,
                ],
                "Volume Scl√©pios": [
                    avis_an_plus,
                    ccmu2_an_plus,
                    ccmu3_an_plus,
                    uhcd_an + uhcd_sclepios_an,
                ],
                "Gain Scl√©pios (‚Ç¨)": [
                    rev_an_plus_avis,
                    rev_an_plus_ccmu2,
                    rev_an_plus_ccmu3,
                    rev_an_plus_uhcd,
                ],
            }
        )
        detail_an_df["ROI (%)"] = (
            (detail_an_df["Gain Scl√©pios (‚Ç¨)"] - detail_an_df["Gain Baseline (‚Ç¨)"]) / detail_an_df["Gain Baseline (‚Ç¨)"] * 100
        ).replace([math.inf, -math.inf], 0).round(1)
        cols_num = ["Gain Baseline (‚Ç¨)", "Gain Scl√©pios (‚Ç¨)"]
        detail_an_df[cols_num] = detail_an_df[cols_num].round(2)
        st.dataframe(detail_an_df.set_index("Levier"), use_container_width=True)

    # -------- Projection sur volume de passages --------
    st.markdown("### üîÑ Projection sur un volume annuel de passages")
    new_total_passages = st.number_input(
        "Nombre total de passages projet√© sur l'ann√©e",
        min_value=1,
        step=100,
        value=total_passages_init,
        key="total_proj",
        format="%d",
    )

    if new_total_passages != total_passages_init:
        scale = new_total_passages / total_passages_init

        uhcd_proj = to_int(uhcd_an * scale)
        uhcd_plus_proj = to_int((uhcd_an + uhcd_sclepios_an) * scale)

        consult_proj_base = to_int(consult_an * scale)
        consult_proj_plus = max(0, consult_proj_base - uhcd_sclepios_an * scale)

        # -------- Revenus & ROI --------
        (
            rev_base_total,
            rev_base_uhcd,
            rev_base_avis,
            rev_base_ccmu2,
            rev_base_ccmu3,
            avis_base,
            ccmu2_base,
            ccmu3_base,
        ) = revenues(uhcd_proj, consult_proj_base, tarifs)

        (
            rev_plus_total,
            rev_plus_uhcd,
            rev_plus_avis,
            rev_plus_ccmu2,
            rev_plus_ccmu3,
            avis_plus,
            ccmu2_plus,
            ccmu3_plus,
        ) = revenues(uhcd_plus_proj, consult_proj_plus, tarifs)

        roi_uhcd_pct = (
            (rev_plus_uhcd - rev_base_uhcd) / rev_base_uhcd * 100 if rev_base_uhcd else 0
        )
        roi_total_pct = (
            (rev_plus_total - rev_base_total) / rev_base_total * 100 if rev_base_total else 0
        )

        st.markdown("### üí∂ ROI (projection passages)")
        r1, r2, r3 = st.columns(3)
        r1.metric("Recette UHCD actuelle (‚Ç¨)", f"{rev_base_uhcd:,.0f}")
        r2.metric("Recette UHCD apr√®s Scl√©pios (‚Ç¨)", f"{rev_plus_uhcd:,.0f}")
        r3.metric("ROI UHCD (%)", f"{roi_uhcd_pct:.1f}¬†%")

        r4, r5 = st.columns(2)
        r4.metric("Recette totale actuelle (‚Ç¨)", f"{rev_base_total:,.0f}")
        r5.metric("ROI total apr√®s Scl√©pios (%)", f"{roi_total_pct:.1f}¬†%")

        # -------- Visualisation d√©taill√©e --------
        st.markdown("### üìã D√©tail par levier (projection passages)")
        detail_df = pd.DataFrame(
            {
                "Levier": ["Avis sp√©cialis√©s", "CCMU¬†2+", "CCMU¬†3+", "UHCD"],
                "Volume Baseline": [avis_base, ccmu2_base, ccmu3_base, uhcd_proj],
                "Gain Baseline (‚Ç¨)": [
                    rev_base_avis,
                    rev_base_ccmu2,
                    rev_base_ccmu3,
                    rev_base_uhcd,
                ],
                "Volume Scl√©pios": [avis_plus, ccmu2_plus, ccmu3_plus, uhcd_plus_proj],
                "Gain Scl√©pios (‚Ç¨)": [
                    rev_plus_avis,
                    rev_plus_ccmu2,
                    rev_plus_ccmu3,
                    rev_plus_uhcd,
                ],
            }
        )
        detail_df["ROI (%)"] = (
            (detail_df["Gain Scl√©pios (‚Ç¨)"] - detail_df["Gain Baseline (‚Ç¨)"]) / detail_df["Gain Baseline (‚Ç¨)"] * 100
        ).replace([math.inf, -math.inf], 0).round(1)
        cols_num = ["Gain Baseline (‚Ç¨)", "Gain Scl√©pios (‚Ç¨)"]
        detail_df[cols_num] = detail_df[cols_num].round(2)
        st.dataframe(detail_df.set_index("Levier"), use_container_width=True)

        # -------- Graphe comparatif --------
        bar_df = detail_df.melt(
            id_vars="Levier",
            value_vars=["Gain Baseline (‚Ç¨)", "Gain Scl√©pios (‚Ç¨)"],
            var_name="Scenario",
            value_name="Gain (‚Ç¨)",
        )
        fig2 = px.bar(
            bar_df,
            x="Gain (‚Ç¨)",
            y="Levier",
            color="Scenario",
            orientation="h",
            template="plotly_white",
            text="Gain (‚Ç¨)",
        )
        fig2.update_traces(texttemplate="%{text:,.0f}")
        fig2.update_layout(margin=dict(l=60, r=60, t=40, b=40))
        st.plotly_chart(fig2, use_container_width=True)

    # FOOTER SP√âCIFIQUE ONGLET 2
    st.markdown("---")
    st.markdown("<div style='text-align:center;'>https://sclepios-ia.com</div>", unsafe_allow_html=True)
